@model  OnlineLibraryMVCApi.ViewModels.BookFormViewModel
@{
    ViewBag.Title = "NewBook";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Book Form</h2>
@using (Html.BeginForm("Save", "Book"))
{
    <div class="wrapper">
        <div class="forms col-sm-8">
            <div class="row">
                <div class="form-group col-sm-6">
                    @Html.LabelFor(b => b.Name)
                    @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Name)
                </div>
                <div class="form-group col-sm-6">
                    @Html.LabelFor(b => b.Publication.Name)
                    @Html.TextBoxFor(b => b.Publication.Name, new { @id = "publication", @class = "form-control", @data_rule_validpublication = "true" })
                    @Html.ValidationMessageFor(m => m.Publication.Name)
                </div>
            </div>
            <div class="row">
                <div class="form-group col-sm-6">
                    @Html.LabelFor(b => b.Isbn)
                    @Html.TextBoxFor(b => b.Isbn, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.Isbn)
                </div>
                <div class="form-group col-sm-6">
                    @Html.LabelFor(b => b.TotalPage)
                    @Html.TextBoxFor(b => b.TotalPage, new { @class = "form-control" })
                    @Html.ValidationMessageFor(b => b.TotalPage)
                </div>
            </div>
            <div class="row">
                <div class="form-group col-sm-6">
                    @Html.LabelFor(b => b.Author.Name)
                    @Html.TextBoxFor(b => b.Author.Name, new { @id = "author", @class = "form-control", @data_rule_validauthor = "true" })
                    @Html.ValidationMessageFor(b => b.Author.Name)
                </div>
                <div class="form-group col-sm-6">
                    @Html.LabelFor(b => b.Category.Name)
                    @Html.TextBoxFor(b => b.Category.Name, new { @id = "category", @class = "form-control", @data_rule_validcategory = "true" })
                    @Html.ValidationMessageFor(b => b.Category.Name)
                </div>
            </div>

            <div class="row">
                <div class="form-group col-sm-6">
                </div>

                <div id="for-flex" class="form-group col-sm-6">
                    <button type="submit" id="btnSave" class="btn btn-primary">Save</button>
                    <button type="reset" id="btnCancel" class="btn btn-info">Cancel</button>
                </div>
            </div>
        </div>
    </div>
    @Html.HiddenFor(m => m.Id)
    @Html.AntiForgeryToken()

    <div class="wrapper col-sm-4">
        <div class="col-sm-12">
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <h3 class="panel-title">Notes:</h3>
                </div>
                <div class="panel-body">
                    <p>1. All fields must be provided except No. of Page.</p>
                    <p>2. Publication, Author and Category must be chosen from auto-complete.</p>
                    <p>3. If you can't get value from auto-complete, its value must be inserted first.</p>
                </div>
            </div>
        </div>
    </div>

}

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")

    <script>

        $(document).ready(function () {
            var valid = {};

            //-----Publication-------
            var publications = new Bloodhound({

                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/publications?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#publication').typeahead({
                minLength: 3,
                highlight: true
            }, {
                name: 'publications',
                display: 'name',
                source: publications
            }).on("typeahead:select", function (e, publication) {
                valid.publicationId = publication.id;
            });

            $.validator.addMethod("validPublication", function () {
                return valid.publicationId && valid.publicationId !== 0;
            }, "Please select a valid publication.");

            //-----Authors-------
            var authorName = new Bloodhound({

                datumTokenizer: Bloodhound.tokenizers.obj.whitespace,
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/authors?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#author').typeahead({
                minLength: 3,
                highlight: true
            }, {
                name: 'authorName',
                display: 'name',
                source: authorName
            }).on("typeahead:select", function (e, author) {
                valid.authorId = author.id;
            });

            $.validator.addMethod("validauthor", function () {
                return valid.authorId && valid.authorId !== 0;
            }, "Please select valid author.");

            //-----Category-------
            var categories = new Bloodhound({

                datumTokenizer: Bloodhound.tokenizers.obj.whitespace('name'),
                queryTokenizer: Bloodhound.tokenizers.whitespace,
                remote: {
                    url: '/api/categories?query=%QUERY',
                    wildcard: '%QUERY'
                }
            });

            $('#category').typeahead({
                minLength: 3,
                highlight: true
            }, {
                name: 'categories',
                display: 'name',
                source: categories,

            }).on("typeahead:select", function (e, category) {
                valid.categoryId = category.id;
            });
            $.validator.addMethod("validcategory", function () {
                return valid.categoryId && valid.categoryId !== 0;
            }, "Please select valid category.");

        });
    </script>
}